#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import copy
import operator
reload(sys)
sys.setdefaultencoding('utf-8')

import random
import itertools
import re, math
import networkx as nx
import numpy as np

from prettytable import PrettyTable
from collections import Counter
from collections import OrderedDict
from collections import namedtuple
from itertools import chain

from RecommendUp import UsersInfo

WORD = re.compile(r'\w+')

from TopicsHierarchy import buildNetworkFromList
from TopicsHierarchy import plotFancyGraph
from TopicsHierarchy import fancyTopicClassification
from TopicsHierarchy import computeFromAdjacency

####### USEFUL FUNCTIONS ########

def static_vars(**kwargs):
    def decorate(func):
        for k in kwargs:
            setattr(func, k, kwargs[k])
        return func
    return decorate


def affinityScore( userID1, userID2, userDict ):

    list_user1 = userDict[ userID1 ]
    list_user2 = userDict[ userID2 ]

    user1_aff_for_user2 = float( len ( set(list_user1).intersection( list_user2 ) ) ) / len( list_user1 )
    user2_aff_for_user1 = float( len ( set(list_user2).intersection( list_user1 ) ) ) / len( list_user2 )

    return user1_aff_for_user2, user2_aff_for_user1


def cosineAffinityScore( userID1, userID2, userDict ):

    list_user1 = userDict[ userID1 ]
    list_user2 = userDict[ userID2 ]

    intersection = set(list_user1.keys()) & set(list_user2.keys())
    numerator = sum( [list_user1[x] * list_user2[x] for x in intersection] )

    sum1 = sum( [list_user1[x]**2 for x in list_user1.keys()] )
    sum2 = sum( [list_user2[x]**2 for x in list_user2.keys()] )
    denominator = math.sqrt(sum1) * math.sqrt(sum2)
    
    if not denominator:
        return 0.0
    else:
        return float(numerator) / denominator


def textToVector(text):

     words = WORD.findall(text)
     return Counter(words)


text1 = 'This is a foo bar sentence .'
text2 = 'This sentence is similar to a foo bar sentence .'

vector1 = textToVector(text1)
vector2 = textToVector(text2)

#print vector1
#print vector2

#cosine = cosineAffinityScore(vector1, vector2)
#print 'Cosine:', cosine

#assert(0)

##################################

def sampling(myList, k):

    # fill the reservoir to start                                                                                                                                                                         
    result = myList[0:k]

    n = k
    for item in myList[k:]:
        n += 1
        s = random.randint(0, n)
        if s < k:
            result[s] = item

    return result


def searchPairIndex(M, userID):

    flatM = list(chain.from_iterable(M))
    myIndex = flatM.index(userID) / 2
    return myIndex


NGEN = 10
MUTPB = 0.3 # mutation probability
MUTB = 0.3

# individual
class Suggestion(list):

    def __init__(self, myPopulation):     # population is in a usersInfo format

        self.population = myPopulation.users
        self.matchingMatrix = myPopulation.matchingMatrix
                                                                                                               
        self.initialize()

        # needs to be a shallow copy
        
        # should be weighted average with powerScore for powerUsers
        self.meetingScores = [ 0.5 * self.matchingMatrix[elem1][elem2] + 0.5 * self.matchingMatrix[elem2][elem1] for elem1, elem2 in self ]
        self.fitness = self.evaluate()


    def initialize( self ):
    
        myListOfUsers = self.population.keys()
        random.shuffle( myListOfUsers )
    
        myResults = [ (x, y) for x, y in itertools.izip( myListOfUsers[0::2], myListOfUsers[1::2] ) ]
        if len(myListOfUsers) % 2 == 1:
            myResults.append( (myListOfUsers[-1],) )
    
        list.__init__(self, myResults)


    def evaluate( self ):

        myMin = min(self.meetingScores)
        myAvg = np.mean(self.meetingScores)

        #return myMin
        return (myMin, myAvg, )


    def mutate( self ):

        print "Beginning of mutation"

        #myList = copy.deepcopy(self)
        myLoner = None

        if myLoner == None and self[-1][1] == None:
            myLoner = self[-1][0]
            self.pop[-1]

        lowest_fitness = 1.0
        index_lowest = 0
        bestUserA, bestUserB = self[0]

        index = 0

        for index in range(len(self)):
            currFitness = self.meetingScores[index]
            if self.meetingScores[index] < lowest_fitness:
                lowest_fitness = currFitness
                bestUserA, bestUserB = self[index]
                lowest_index = index

        otherUserA, otherUserB = bestUserA, bestUserB
   
        while (otherUserA, otherUserB) == (bestUserA, bestUserB):
            myPair_index = random.randint(0, len(self) - 1)
            otherUserA, otherUserB = self[myPair_index]

        myReservoir = [ bestUserA, bestUserB, otherUserA, otherUserB ]
        if myLoner:
            myReservoir.append( myLoner )
        random.shuffle( myReservoir )

        myNewPair_1 = sampling( myReservoir, 2 )
        print myReservoir
        print myNewPair_1

        print "HERE:", myReservoir
        myReservoir.remove( myNewPair_1[0] )
        myReservoir.remove( myNewPair_1[1]) 
        if myLoner == None:
            myNewPair_2 = myReservoir
        else:
            myNewPair_2 = sampling( MyReservoir, 2 )
        print myNewPair_2
        print "THERE:", myReservoir

        self.__setitem__(lowest_index, tuple(myNewPair_1))
        self.__setitem__(myPair_index, tuple(myNewPair_2))
        if myLoner:
            self.append((myLoner,))

        self.meetingScores = [ 0.5 * self.matchingMatrix[elem1][elem2] + 0.5 * self.matchingMatrix[elem2][elem1] for elem1, elem2 in self ]
        self.fitness = self.evaluate()

        print "End of mutation"


    def mate(self, other):

        M = copy.deepcopy(self)
        F = copy.deepcopy(other)
        #M = sorted(self, key = operator.itemgetter(0))
        #F = sorted(other, key = operator.itemgetter(0))

        meetingsM = copy.deepcopy(self.meetingScores)
        meetingsF = copy.deepcopy(other.meetingScores)

        #mySortedLists = sorted(izip(M, meetingsM), reverse=True, key=lambda x: x[0][0])
        #a, b, c, d, score = [[x[i] for x in sorted_lists] for i in range(5)]

        print "Starting Mating..."

        print "MALE"
        print M
        print meetingsM

        print "FEMALE"
        print F
        print meetingsF

        child = []
        myPool = []

        while len(M) > 0 and len(F) > 0:

            indexM    = random.randint(0, len(M)-1)
            subindexM = random.randint(0, 1)

            print "---", M[indexM][subindexM]
            indexF = searchPairIndex(F, M[indexM][subindexM])
            print "---", F[indexF]

            print "meeting Qualities =", meetingsM[indexM], meetingsF[indexF]

            '''
            if meetingsM[indexM] > meetingsF[indexF]:
                if M[indexM][0] not in child and M[indexM][1] not in child:
                    child.extend( M[indexM] )
                    M.pop(indexM)
                    meetingsM.pop(indexM)
                else:
                    if M[indexM][0] not in child:
                        myPool.append( M[indexM][0] )
                        M.pop(indexM)
                        meetingsM.pop(indexM)
                    elif M[indexM][1] not in child:
                        myPool.append( M[indexM][1] )
                        M.pop(indexM)
                        meetingsM.pop(indexM)
                    else:
                        assert(0)
            else:
                if F[indexF][0] not in child and F[indexF][1] not in child:
                    child.extend( F[indexF] )
                    F.pop(indexF)
                    meetingsF.pop(indexF)
                else:
                    if F[indexF][0] not in child:
                        myPool.append( F[indexF][0] )
                        F.pop(indexF)
                        meetingsF.pop(indexF)
                    elif F[indexF][1] not in child:
                        myPool.append( F[indexF][1] )
                        F.pop(indexF)
                        meetingsF.pop(indexF)
                    else:
                        assert(0)
            '''

            def FindTheLoner(M, F, indexM, indexF):

                for ind in [0,1]:
                    if F[indexF][ind] in M[indexM]:
                        return F[indexF][1-ind]


            while len(M)!=0 and len(F)!=0:
                
                indexM    = random.randint(0, len(M)-1)
                subindexM = random.randint(0, 1)
                indexF = searchPairIndex(F, M[indexM][subindexM])

                if meetingsM[indexM] < meetingsF[indexF]:
                    temp = copy.deepcopy(M)
                    M = copy.deepcopy(F)
                    F = temp
                
                child.extend( M[indexM] )
                myLoner = FindTheLoner(M, F, indexM, indexF)
                M.pop(indexM)
                meetingsM.pop(indexM)
                F.pop(indexF)
                meetingsF.pop(indexF)
                indexMb = searchPairIndex(F, myLoner)
                child.extend( M[indexMb] )
                M.pop(indexMb)
                meetingsM.pop[indexMb]
 
        '''
        random.shuffle( myPool )
        myResults = [ (x, y) for x, y in itertools.izip( myPool[0::2], myPool[1::2] ) ]
        child.extend(myResults)
        '''

        myChild = copy.deepcopy(self)
        print type(myChild)
        myChild[:] = list( zip( child[0::2], child[1::2] ) )
        myChild.fitness = myChild.evaluate()

        return myChild


class Suggestions(list):

    def __init__(self, myPopulation, n = 8):

        matchingMatrix = Suggestion(myPopulation)

        print "POPULATION STUFF"
        list.__init__(self, [ Suggestion(myPopulation) for _ in range(n) ])

        for individual in self:
            print individual
            print individual.fitness


    def evolve(self, numGenerations=10):

        for gen in range(numGenerations):

            for index in range( len(self) ):
                if random.random() < MUTPB:
                    self[index].mutate()
            
            myParents = [ individual for individual in self ]
            random.shuffle( myParents )

            myParents = [ (x,y) for x, y in itertools.izip( myParents[0::2], myParents[1::2] ) ]
            print "myParents", myParents
            
            myNewPopulation = []

            for myFather, myMother in myParents:
                
                myChild = myFather.mate(myMother)
                
                if myFather.fitness[1] <= min(myMother.fitness[1], myChild.fitness[1]):
                    myNewPopulation.extend( (myMother, myChild) )
                elif myMother.fitness[1] <= min(myFather.fitness[1], myChild.fitness[1]):
                    myNewPopulation.extend( (myFather, myChild) )
                else:
                    myNewPopulation.extend( (myMother, myFather) )
                    
            # keep two best out of father, mother and child
            self.__setslice__(0, len(self), myNewPopulation[0:] )
        

def main():

    # Get List Of Users for Area
    myUsersInfo = Users.UsersInfo( '../Data/Sample.csv' )
    #print myUsersInfo

    oneSuggestion = Suggestion( myUsersInfo )
    
    print " \n\n\n\n"
    print "1", oneSuggestion
    print "2", oneSuggestion.fitness
    print "\n\n\n\n"

    oneSuggestion.mutate()
    
    print "1", oneSuggestion
    print "2", oneSuggestion.fitness
    
    #print "TEST HERE"
    mySuggestions = Suggestions( myUsersInfo )
    print mySuggestions
    print "EVOLVE"
    mySuggestions.evolve()
    print "END OF EVOLVE"
    print mySuggestions

if __name__ == "__main__":

     main()
